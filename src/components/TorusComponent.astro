---
// 这里不需要服务端代码
---

<!-- 3D场景容器 -->
<div id="torus-container" style="width: 100%; height: 100vh;"></div>

<script>
  // 客户端挂载时初始化Three.js场景
  const initScene = async () => {
    // 动态导入Three.js以减少初始包大小
    const THREE = await import('three');
    
    // 创建场景
    const scene = new THREE.Scene();
    
    // 创建相机
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;
    
    // 创建渲染器
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x1a1a1a); // 设置背景色为深灰色
    
    // 将渲染器添加到页面
    document.getElementById('torus-container').appendChild(renderer.domElement);
    
    // 启用渲染器的交互功能
    renderer.domElement.style.touchAction = 'none';
    
    // 创建圆环几何体
    const geometry = new THREE.TorusGeometry(1, 0.4, 16, 100);
    
    // 创建材质
    const material = new THREE.MeshStandardMaterial({ 
      roughness: 0.1,
      metalness: 0.9
    }); // 使用标准材质以获得更好的HDR效果
    
    // 创建网格
    const torus = new THREE.Mesh(geometry, material);
    scene.add(torus);
    
    // 创建水面
    const waterGeometry = new THREE.PlaneGeometry(1000, 1000);
    
    // 导入Water类
    const { Water } = await import('three/examples/jsm/objects/Water.js');
    
    // 创建水面对象
    const water = new Water(
      waterGeometry,
      {
        textureWidth: 512,
        textureHeight: 512,
        waterNormals: new THREE.TextureLoader().load('https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/waternormals.jpg', function(texture) {
          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
        }),
        sunDirection: new THREE.Vector3(),
        sunColor: 0xffffff,
        waterColor: 0x001e0f,
        distortionScale: 1.7,
        fog: scene.fog !== undefined
      }
    );
    
    // 调整水面位置和旋转
    water.rotation.x = -Math.PI / 2;
    water.position.y = -3;
    scene.add(water);
    
    // 导入OrbitControls
    const { OrbitControls } = await import('three/examples/jsm/controls/OrbitControls.js');
    
    // 加载HDR环境贴图
    const { RGBELoader } = await import('three/examples/jsm/loaders/RGBELoader.js');
    const rgbeLoader = new RGBELoader();
    
    // 设置HDR贴图路径
    const hdrTexture = await rgbeLoader.loadAsync('/threejs-learn/hdr/default.hdr');
    hdrTexture.mapping = THREE.EquirectangularReflectionMapping;
    
    // 配置渲染器的色调映射以修正曝光度
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 0.6; // 降低曝光度值，让HDR环境贴图不过曝
    renderer.outputColorSpace = THREE.SRGBColorSpace;
    
    // 将HDR贴图设置为场景环境贴图
    scene.environment = hdrTexture;
    scene.background = hdrTexture;
    
    // 创建控制器
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true; // 启用阻尼效果
    controls.dampingFactor = 0.05; // 阻尼系数
    controls.screenSpacePanning = false; // 禁用屏幕空间平移
    controls.minDistance = 1; // 最小缩放距离
    controls.maxDistance = 50; // 最大缩放距离
    
    // 水面动画速度控制
    const waterAnimationSpeed = 0.2; // 调整这个值来控制水面动画速度，1.0为默认速度
    
    // 动画函数
    const animate = () => {
      requestAnimationFrame(animate);
      
      // 更新控制器
      controls.update();
      
      // 使圆环沿Y轴缓慢旋转
      torus.rotation.y += 0.005;
      
      // 更新水面动画
      water.material.uniforms["time"].value += (1.0 / 60.0) * waterAnimationSpeed;
      
      // 渲染场景
      renderer.render(scene, camera);
    };
    
    // 启动动画
    animate();
    
    // 处理窗口大小调整
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    
    window.addEventListener('resize', handleResize);
    
    // 组件卸载时清理事件监听器
    return () => {
      window.removeEventListener('resize', handleResize);
      controls.dispose(); // 清理控制器
    };
  };
  
  // 组件加载时初始化场景
  initScene();
</script>