---
// 这里不需要服务端代码
---

<!-- 3D场景容器 -->
<div id="torus-container" style="width: 100%; height: 100vh;"></div>

<!-- Vision Pro风格控制面板 -->
<div id="control-panel" style="position: fixed; bottom: 30px; left: 50%; transform: translateX(-50%); z-index: 1000;">
  
  <!-- 模型控制菜单 -->
  <div class="vision-menu" id="model-menu-container" style="margin-bottom: 15px;">
    <div class="menu-header" data-menu="model">
      <span class="menu-title">模型</span>
      <span class="menu-toggle">▼</span>
    </div>
    <div class="menu-content">
      <div class="button-group">
        <button class="control-btn active" data-model="torus" data-tooltip="圆环">🍩</button>
        <button class="control-btn" data-model="sphere" data-tooltip="球体">🔮</button>
        <button class="control-btn" data-model="cube" data-tooltip="立方体">📦</button>
        <button class="control-btn" data-model="cone" data-tooltip="圆锥">🔺</button>
        <button class="control-btn" data-model="cylinder" data-tooltip="圆柱">🥫</button>
      </div>
    </div>
  </div>

  <!-- 材质控制菜单 -->
  <div class="vision-menu" id="material-menu-container">
    <div class="menu-header" data-menu="material">
      <span class="menu-title">材质</span>
      <span class="menu-toggle">▼</span>
    </div>
    <div class="menu-content">
      <div class="button-group">
        <button class="control-btn active" data-material="chrome" data-tooltip="铬合金">✨</button>
        <button class="control-btn" data-material="gold" data-tooltip="黄金">👑</button>
        <button class="control-btn" data-material="copper" data-tooltip="铜">🔶</button>
        <button class="control-btn" data-material="emerald" data-tooltip="翡翠">💚</button>
        <button class="control-btn" data-material="ruby" data-tooltip="红宝石">❤️</button>
        <button class="control-btn" data-material="sapphire" data-tooltip="蓝宝石">💙</button>
      </div>
    </div>
  </div>

</div>

<!-- Vision Pro UI 样式 -->
<style>
  /* Vision Pro 毛玻璃效果 */
  .vision-menu {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 20px;
    padding: 0;
    min-width: 280px;
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
  }

  .vision-menu:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  .menu-header {
    padding: 12px 20px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: rgba(255, 255, 255, 0.05);
    transition: background 0.2s ease;
  }

  .menu-header:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .menu-title {
    color: rgba(255, 255, 255, 0.9);
    font-size: 14px;
    font-weight: 500;
    letter-spacing: 0.5px;
  }

  .menu-toggle {
    color: rgba(255, 255, 255, 0.7);
    font-size: 12px;
    transition: transform 0.3s ease;
  }

  .menu-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .menu-content.expanded {
    max-height: 100px;
    padding: 15px 20px;
  }

  .button-group {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    justify-content: center;
  }

  .control-btn {
    width: 44px;
    height: 44px;
    border: none;
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.15);
    color: rgba(255, 255, 255, 0.9);
    font-size: 16px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .control-btn:hover {
    background: rgba(255, 255, 255, 0.25);
    transform: scale(1.05);
  }

  .control-btn.active {
    background: rgba(76, 175, 80, 0.8);
    box-shadow: 0 0 20px rgba(76, 175, 80, 0.4);
  }

  .control-btn.active:hover {
    background: rgba(76, 175, 80, 0.9);
  }

  /* 工具提示 */
  .control-btn::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 5px 10px;
    border-radius: 6px;
    font-size: 11px;
    white-space: nowrap;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    margin-bottom: 5px;
  }

  .control-btn:hover::after {
    opacity: 1;
  }

  /* 响应式设计 */
  @media (max-width: 600px) {
    .vision-menu {
      min-width: 240px;
    }
    
    .control-btn {
      width: 38px;
      height: 38px;
      font-size: 14px;
    }
  }
</style>

<script>
  // 客户端挂载时初始化Three.js场景
  const initScene = async () => {
    // 动态导入Three.js以减少初始包大小
    const THREE = await import('three');
    
    // 创建场景
    const scene = new THREE.Scene();
    
    // 创建相机
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;
    
    // 创建渲染器
    const renderer = new THREE.WebGLRenderer({ antialias: true, powerPreference: "high-performance" });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x1a1a1a); // 设置背景色为深灰色
    
    // 启用渲染器的交互功能
    renderer.domElement.style.touchAction = 'none';
    
    // 配置渲染器以提高渲染质量
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 0.6; // 降低曝光度值，让HDR环境贴图不过曝
    renderer.outputColorSpace = THREE.SRGBColorSpace;
    
    // 将渲染器添加到页面
    document.getElementById('torus-container').appendChild(renderer.domElement);
    
    // 材质配置
    const materials = {
      chrome: new THREE.MeshStandardMaterial({ 
        roughness: 0.1,
        metalness: 0.9,
        color: 0xE8E8E8
      }),
      gold: new THREE.MeshStandardMaterial({ 
        roughness: 0.2,
        metalness: 0.8,
        color: 0xFFD700
      }),
      copper: new THREE.MeshStandardMaterial({ 
        roughness: 0.3,
        metalness: 0.7,
        color: 0xB87333
      }),
      emerald: new THREE.MeshStandardMaterial({ 
        roughness: 0.1,
        metalness: 0.3,
        color: 0x50C878
      }),
      ruby: new THREE.MeshStandardMaterial({ 
        roughness: 0.1,
        metalness: 0.3,
        color: 0xE0115F
      }),
      sapphire: new THREE.MeshStandardMaterial({ 
        roughness: 0.1,
        metalness: 0.3,
        color: 0x0F52BA
      })
    };
    
    // 当前状态
    let currentMesh = null;
    let currentModel = 'torus';
    let currentMaterial = 'chrome';
    
    // 创建不同的几何模型
    const createGeometry = (type) => {
      switch(type) {
        case 'torus':
          return new THREE.TorusGeometry(1, 0.4, 16, 100);
        case 'sphere':
          return new THREE.SphereGeometry(1, 32, 32);
        case 'cube':
          return new THREE.BoxGeometry(1.5, 1.5, 1.5);
        case 'cone':
          return new THREE.ConeGeometry(1, 2, 32);
        case 'cylinder':
          return new THREE.CylinderGeometry(1, 1, 2, 32);
        default:
          return new THREE.TorusGeometry(1, 0.4, 16, 100);
      }
    };
    
    // 更新模型和材质
    const updateModel = () => {
      if (currentMesh) {
        scene.remove(currentMesh);
        currentMesh.geometry.dispose();
      }
      
      const geometry = createGeometry(currentModel);
      currentMesh = new THREE.Mesh(geometry, materials[currentMaterial]);
      scene.add(currentMesh);
    };
    
    // 切换模型
    const switchModel = (modelType) => {
      currentModel = modelType;
      updateModel();
      
      // 更新按钮状态
      document.querySelectorAll('[data-model]').forEach(btn => {
        btn.classList.remove('active');
      });
      document.querySelector(`[data-model="${modelType}"]`).classList.add('active');
    };
    
    // 切换材质
    const switchMaterial = (materialType) => {
      currentMaterial = materialType;
      updateModel();
      
      // 更新按钮状态
      document.querySelectorAll('[data-material]').forEach(btn => {
        btn.classList.remove('active');
      });
      document.querySelector(`[data-material="${materialType}"]`).classList.add('active');
    };
    
    // 菜单折叠功能
    const initMenuToggle = () => {
      document.querySelectorAll('.menu-header').forEach(header => {
        header.addEventListener('click', () => {
          const menuType = header.getAttribute('data-menu');
          const content = header.nextElementSibling;
          const toggle = header.querySelector('.menu-toggle');
          
          // 切换折叠状态
          if (content.classList.contains('expanded')) {
            content.classList.remove('expanded');
            toggle.textContent = '▼';
            toggle.style.transform = 'rotate(0deg)';
          } else {
            content.classList.add('expanded');
            toggle.textContent = '▲';
            toggle.style.transform = 'rotate(180deg)';
          }
        });
      });
    };
    
    // 创建水面
    const waterGeometry = new THREE.PlaneGeometry(1000, 1000);
    
    // 导入Water类
    const { Water } = await import('three/examples/jsm/objects/Water.js');
    
    // 创建水面对象
    const water = new Water(
      waterGeometry,
      {
        textureWidth: 512,
        textureHeight: 512,
        waterNormals: new THREE.TextureLoader().load('https://cdn.jsdelivr.net/gh/mrdoob/three.js@master/examples/textures/waternormals.jpg', function(texture) {
          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
        }),
        sunDirection: new THREE.Vector3(),
        sunColor: 0xffffff,
        waterColor: 0x001e0f,
        distortionScale: 1.7,
        fog: scene.fog !== undefined
      }
    );
    
    // 调整水面位置和旋转
    water.rotation.x = -Math.PI / 2;
    water.position.y = -3;
    scene.add(water);
    
    // 导入OrbitControls
    const { OrbitControls } = await import('three/examples/jsm/controls/OrbitControls.js');
    
    // 加载HDR环境贴图
    const { RGBELoader } = await import('three/examples/jsm/loaders/RGBELoader.js');
    const rgbeLoader = new RGBELoader();
    
    // 设置HDR贴图路径
    const hdrTexture = await rgbeLoader.loadAsync('/threejs-learn/hdr/default.hdr');
    hdrTexture.mapping = THREE.EquirectangularReflectionMapping;
    
    // 配置渲染器的色调映射以修正曝光度
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 0.6; // 降低曝光度值，让HDR环境贴图不过曝
    renderer.outputColorSpace = THREE.SRGBColorSpace;
    
    // 将HDR贴图设置为场景环境贴图
    scene.environment = hdrTexture;
    scene.background = hdrTexture;
    
    // 创建控制器
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true; // 启用阻尼效果
    controls.dampingFactor = 0.05; // 阻尼系数
    controls.screenSpacePanning = false; // 禁用屏幕空间平移
    controls.minDistance = 1; // 最小缩放距离
    controls.maxDistance = 50; // 最大缩放距离
    
    // 水面动画速度控制
    const waterAnimationSpeed = 0.2; // 调整这个值来控制水面动画速度，1.0为默认速度
    
    // 初始化场景
    updateModel();
    initMenuToggle();
    
    // 添加事件监听器
    document.querySelectorAll('[data-model]').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const modelType = e.target.getAttribute('data-model');
        switchModel(modelType);
      });
    });
    
    document.querySelectorAll('[data-material]').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const materialType = e.target.getAttribute('data-material');
        switchMaterial(materialType);
      });
    });
    
    // 动画函数
    const animate = () => {
      requestAnimationFrame(animate);
      
      // 更新控制器
      controls.update();
      
      // 使当前模型沿Y轴缓慢旋转
      if (currentMesh) {
        currentMesh.rotation.y += 0.005;
      }
      
      // 更新水面动画
      water.material.uniforms["time"].value += (1.0 / 60.0) * waterAnimationSpeed;
      
      // 渲染场景
      renderer.render(scene, camera);
    };
    
    // 启动动画
    animate();
    
    // 处理窗口大小调整
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    
    window.addEventListener('resize', handleResize);
    
    // 组件卸载时清理事件监听器
    return () => {
      window.removeEventListener('resize', handleResize);
      controls.dispose(); // 清理控制器
      
      // 清理所有材质
      Object.values(materials).forEach(material => material.dispose());
    };
  };
  
  // 组件加载时初始化场景
  initScene();
</script>